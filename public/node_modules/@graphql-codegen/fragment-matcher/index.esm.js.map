{"version":3,"file":"index.esm.js","sources":["../../../dist/plugins/other/fragment-matcher/src/index.js"],"sourcesContent":["import { extname } from 'path';\nimport { removeFederation } from '@graphql-codegen/plugin-helpers';\nimport { execute, parse } from 'graphql';\nconst extensions = {\n    ts: ['.ts', '.tsx'],\n    js: ['.js', '.jsx'],\n    json: ['.json'],\n};\nexport const plugin = async (schema, _documents, pluginConfig, info) => {\n    const config = {\n        module: 'es2015',\n        federation: false,\n        apolloClientVersion: 3,\n        useExplicitTyping: false,\n        ...pluginConfig,\n    };\n    const apolloClientVersion = parseInt(config.apolloClientVersion);\n    const cleanSchema = config.federation ? removeFederation(schema) : schema;\n    const useExplicitTyping = config.useExplicitTyping;\n    const introspection = await execute({\n        schema: cleanSchema,\n        document: parse(`\n      {\n        __schema {\n          types {\n            kind\n            name\n            possibleTypes {\n              name\n            }\n          }\n        }\n      }\n    `),\n    });\n    const ext = extname(info.outputFile).toLowerCase();\n    if (!introspection.data) {\n        throw new Error(`Plugin \"fragment-matcher\" couldn't introspect the schema`);\n    }\n    const filterUnionAndInterfaceTypes = type => type.kind === 'UNION' || type.kind === 'INTERFACE';\n    const createPossibleTypesCollection = (acc, type) => {\n        return { ...acc, ...{ [type.name]: type.possibleTypes.map(possibleType => possibleType.name) } };\n    };\n    const filteredData = apolloClientVersion === 2\n        ? {\n            __schema: {\n                ...introspection.data.__schema,\n                types: introspection.data.__schema.types.filter(type => type.kind === 'UNION' || type.kind === 'INTERFACE'),\n            },\n        }\n        : {\n            possibleTypes: introspection.data.__schema.types\n                .filter(filterUnionAndInterfaceTypes)\n                .reduce(createPossibleTypesCollection, {}),\n        };\n    const content = JSON.stringify(filteredData, null, 2);\n    if (extensions.json.includes(ext)) {\n        return content;\n    }\n    if (extensions.js.includes(ext)) {\n        const defaultExportStatement = config.module === 'es2015' ? `export default` : 'module.exports =';\n        return `\n      ${defaultExportStatement} ${content}\n    `;\n    }\n    if (extensions.ts.includes(ext)) {\n        let typename;\n        if (apolloClientVersion === 2) {\n            typename = `IntrospectionResultData`;\n        }\n        else if (apolloClientVersion === 3) {\n            typename = `PossibleTypesResultData`;\n        }\n        let type;\n        if (useExplicitTyping) {\n            type = `export type ${typename} = ${content};`;\n        }\n        else if (apolloClientVersion === 2) {\n            type = `export interface ${typename} {\n        __schema: {\n          types: {\n            kind: string;\n            name: string;\n            possibleTypes: {\n              name: string;\n            }[];\n          }[];\n        };\n      }`;\n        }\n        else if (apolloClientVersion === 3) {\n            type = `export interface ${typename} {\n        possibleTypes: {\n          [key: string]: string[]\n        }\n      }`;\n        }\n        return `\n      ${type}\n      const result: ${typename} = ${content};\n      export default result;\n    `;\n    }\n    throw new Error(`Extension ${ext} is not supported`);\n};\nexport const validate = async (_schema, _documents, config, outputFile) => {\n    const ext = extname(outputFile).toLowerCase();\n    const all = Object.values(extensions).reduce((acc, exts) => [...acc, ...exts], []);\n    if (!all.includes(ext)) {\n        throw new Error(`Plugin \"fragment-matcher\" requires extension to be one of ${all.map(val => val.replace('.', '')).join(', ')}!`);\n    }\n    if (config.module === 'commonjs' && extensions.ts.includes(ext)) {\n        throw new Error(`Plugin \"fragment-matcher\" doesn't support commonjs modules combined with TypeScript!`);\n    }\n};\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}