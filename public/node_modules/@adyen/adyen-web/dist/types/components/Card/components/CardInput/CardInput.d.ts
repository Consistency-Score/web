import { Component, h } from 'preact';
import { CardInputProps, CardInputState } from './types';
import './CardInput.scss';
declare class CardInput extends Component<CardInputProps, CardInputState> {
    private readonly validateCardInput;
    private readonly handleOnBrand;
    private readonly handleFocus;
    private readonly handleAddress;
    private readonly handleHolderName;
    private readonly handleInstallments;
    private readonly handleKCPAuthentication;
    private readonly handleSecuredFieldsChange;
    private readonly handleOnStoreDetails;
    private readonly handleAdditionalDataSelection;
    private readonly processBinLookup;
    state: any;
    props: any;
    private setFocusOn;
    private updateStyles;
    private handleUnsupportedCard;
    private sfp;
    private billingAddressRef;
    private kcpAuthenticationRef;
    constructor(props: any);
    static defaultProps: {
        details: any[];
        type: string;
        hasHolderName: boolean;
        holderNameRequired: boolean;
        enableStoreDetails: boolean;
        hideCVC: boolean;
        hasCVC: boolean;
        hasStoreDetails: boolean;
        storedDetails: boolean;
        showBrandIcon: boolean;
        billingAddressRequired: boolean;
        billingAddressRequiredFields: string[];
        installmentOptions: {};
        configuration: {
            koreanAuthenticationRequired: boolean;
        };
        onLoad: () => void;
        onConfigSuccess: () => void;
        onAllValid: () => void;
        onFieldValid: () => void;
        onBrand: () => void;
        onError: () => void;
        onBinValue: () => void;
        onBlur: () => void;
        onFocus: () => void;
        onChange: () => void;
        originKey: any;
        holderName: string;
        data: {
            holderName: string;
            billingAddress: {};
        };
        styles: {};
        placeholders: {};
        ariaLabels: {};
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: any, prevState: any): void;
    componentWillUnmount(): void;
    getChildContext(): {
        i18n: any;
    };
    setStatus(status: any): void;
    resetAdditionalSelectState(): void;
    showValidation(): void;
    processBinLookupResponse(data: any): void;
    render({ countryCode, loadingContext, hasHolderName, hasCVC, installmentOptions, enableStoreDetails, showInstallmentAmounts }: {
        countryCode: any;
        loadingContext: any;
        hasHolderName: any;
        hasCVC: any;
        installmentOptions: any;
        enableStoreDetails: any;
        showInstallmentAmounts: any;
    }, { status, hideCVCForBrand, focusedElement, issuingCountryCode }: {
        status: any;
        hideCVCForBrand: any;
        focusedElement: any;
        issuingCountryCode: any;
    }): h.JSX.Element;
}
export default CardInput;
